//
//  ClockPC.swift
//  ClockPC
//
//  Created by Wolfgang Muhsal on 15.01.19.
//  Copyright Â© 2019 WMCom. All rights reserved.
//
//  Generated by PaintCode
//  http://www.paintcodeapp.com
//



import UIKit

public class ClockPC : NSObject {

    //// Drawing Methods

    @objc dynamic public class func drawClock(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 80, height: 80), resizing: ResizingBehavior = .aspectFit, hour: CGFloat = 0, minute: CGFloat = 0) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 80, height: 80), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 80, y: resizedFrame.height / 80)


        //// Color Declarations
        let black = UIColor(red: 0.000, green: 0.000, blue: 0.000, alpha: 1.000)

        //// ClockBorder Drawing
        let clockBorderPath = UIBezierPath()
        clockBorderPath.move(to: CGPoint(x: 39.86, y: 70.46))
        clockBorderPath.addCurve(to: CGPoint(x: 9.27, y: 39.86), controlPoint1: CGPoint(x: 23, y: 70.46), controlPoint2: CGPoint(x: 9.27, y: 56.73))
        clockBorderPath.addCurve(to: CGPoint(x: 39.86, y: 9.27), controlPoint1: CGPoint(x: 9.27, y: 22.99), controlPoint2: CGPoint(x: 23, y: 9.27))
        clockBorderPath.addCurve(to: CGPoint(x: 70.46, y: 39.86), controlPoint1: CGPoint(x: 56.73, y: 9.27), controlPoint2: CGPoint(x: 70.46, y: 22.99))
        clockBorderPath.addCurve(to: CGPoint(x: 39.86, y: 70.46), controlPoint1: CGPoint(x: 70.46, y: 56.73), controlPoint2: CGPoint(x: 56.73, y: 70.46))
        clockBorderPath.close()
        clockBorderPath.move(to: CGPoint(x: 39.86, y: 1))
        clockBorderPath.addCurve(to: CGPoint(x: 1, y: 39.86), controlPoint1: CGPoint(x: 18.43, y: 1), controlPoint2: CGPoint(x: 1, y: 18.43))
        clockBorderPath.addCurve(to: CGPoint(x: 39.86, y: 78.73), controlPoint1: CGPoint(x: 1, y: 61.29), controlPoint2: CGPoint(x: 18.43, y: 78.73))
        clockBorderPath.addCurve(to: CGPoint(x: 78.73, y: 39.86), controlPoint1: CGPoint(x: 61.29, y: 78.73), controlPoint2: CGPoint(x: 78.73, y: 61.29))
        clockBorderPath.addCurve(to: CGPoint(x: 39.86, y: 1), controlPoint1: CGPoint(x: 78.73, y: 18.43), controlPoint2: CGPoint(x: 61.29, y: 1))
        clockBorderPath.close()
        black.setFill()
        clockBorderPath.fill()


        //// HourArm Drawing
        context.saveGState()
        context.translateBy(x: 39.86, y: 39.86)
        context.rotate(by: -hour * CGFloat.pi/180)

        let hourArmPath = UIBezierPath()
        hourArmPath.move(to: CGPoint(x: -21.86, y: -3.86))
        hourArmPath.addLine(to: CGPoint(x: 0.14, y: -3.86))
        hourArmPath.addCurve(to: CGPoint(x: 4.14, y: 0.14), controlPoint1: CGPoint(x: 2.35, y: -3.86), controlPoint2: CGPoint(x: 4.14, y: -2.07))
        hourArmPath.addCurve(to: CGPoint(x: 0.14, y: 4.14), controlPoint1: CGPoint(x: 4.14, y: 2.35), controlPoint2: CGPoint(x: 2.35, y: 4.14))
        hourArmPath.addLine(to: CGPoint(x: -21.86, y: 4.14))
        hourArmPath.addCurve(to: CGPoint(x: -25.86, y: 0.14), controlPoint1: CGPoint(x: -24.07, y: 4.14), controlPoint2: CGPoint(x: -25.86, y: 2.35))
        hourArmPath.addCurve(to: CGPoint(x: -21.86, y: -3.86), controlPoint1: CGPoint(x: -25.86, y: -2.07), controlPoint2: CGPoint(x: -24.07, y: -3.86))
        hourArmPath.close()
        black.setFill()
        hourArmPath.fill()

        context.restoreGState()


        //// MinuteArm Drawing
        context.saveGState()
        context.translateBy(x: 39.86, y: 39.86)
        context.rotate(by: -minute * CGFloat.pi/180)

        let minuteArmPath = UIBezierPath()
        minuteArmPath.move(to: CGPoint(x: -2.83, y: -2.83))
        minuteArmPath.addLine(to: CGPoint(x: 12.73, y: -18.39))
        minuteArmPath.addCurve(to: CGPoint(x: 18.39, y: -18.39), controlPoint1: CGPoint(x: 14.29, y: -19.95), controlPoint2: CGPoint(x: 16.82, y: -19.95))
        minuteArmPath.addCurve(to: CGPoint(x: 18.39, y: -12.73), controlPoint1: CGPoint(x: 19.95, y: -16.82), controlPoint2: CGPoint(x: 19.95, y: -14.29))
        minuteArmPath.addLine(to: CGPoint(x: 2.83, y: 2.83))
        minuteArmPath.addCurve(to: CGPoint(x: -2.83, y: 2.83), controlPoint1: CGPoint(x: 1.27, y: 4.39), controlPoint2: CGPoint(x: -1.27, y: 4.39))
        minuteArmPath.addCurve(to: CGPoint(x: -2.83, y: -2.83), controlPoint1: CGPoint(x: -4.39, y: 1.27), controlPoint2: CGPoint(x: -4.39, y: -1.27))
        minuteArmPath.close()
        black.setFill()
        minuteArmPath.fill()

        context.restoreGState()
        
        context.restoreGState()

    }

    @objc dynamic public class func drawScale(frame: CGRect = CGRect(x: 0, y: 0, width: 50, height: 50), clockBG: UIColor = UIColor(red: 0.800, green: 0.320, blue: 0.320, alpha: 1.000)) {
        //// General Declarations
        // This non-generic function dramatically improves compilation times of complex expressions.
        func fastFloor(_ x: CGFloat) -> CGFloat { return floor(x) }


        //// Subframes
        let group: CGRect = CGRect(x: frame.minX, y: frame.minY, width: frame.width, height: frame.height)


        //// Group
        //// Oval Drawing
        let ovalPath = UIBezierPath(ovalIn: CGRect(x: group.minX + fastFloor(group.width * 0.00000 + 0.5), y: group.minY + fastFloor(group.height * 0.00000 + 0.5), width: fastFloor(group.width * 1.00000 + 0.5) - fastFloor(group.width * 0.00000 + 0.5), height: fastFloor(group.height * 1.00000 + 0.5) - fastFloor(group.height * 0.00000 + 0.5)))
        clockBG.setFill()
        ovalPath.fill()


        //// Rectangle Drawing
        let rectanglePath = UIBezierPath(rect: CGRect(x: group.minX + fastFloor(group.width * 0.46000 + 0.5), y: group.minY + fastFloor(group.height * 0.46000 + 0.5), width: fastFloor(group.width * 0.86000 + 0.5) - fastFloor(group.width * 0.46000 + 0.5), height: fastFloor(group.height * 0.54000 + 0.5) - fastFloor(group.height * 0.46000 + 0.5)))
        UIColor.white.setFill()
        rectanglePath.fill()


        //// Rectangle 2 Drawing
        let rectangle2Path = UIBezierPath(rect: CGRect(x: group.minX + fastFloor(group.width * 0.46000 + 0.5), y: group.minY + fastFloor(group.height * 0.14000 + 0.5), width: fastFloor(group.width * 0.54000 + 0.5) - fastFloor(group.width * 0.46000 + 0.5), height: fastFloor(group.height * 0.54000 + 0.5) - fastFloor(group.height * 0.14000 + 0.5)))
        UIColor.white.setFill()
        rectangle2Path.fill()
    }




    @objc(ClockPCResizingBehavior)
    public enum ResizingBehavior: Int {
        case aspectFit /// The content is proportionally resized to fit into the target rectangle.
        case aspectFill /// The content is proportionally resized to completely fill the target rectangle.
        case stretch /// The content is stretched to match the entire target rectangle.
        case center /// The content is centered in the target rectangle, but it is NOT resized.

        public func apply(rect: CGRect, target: CGRect) -> CGRect {
            if rect == target || target == CGRect.zero {
                return rect
            }

            var scales = CGSize.zero
            scales.width = abs(target.width / rect.width)
            scales.height = abs(target.height / rect.height)

            switch self {
                case .aspectFit:
                    scales.width = min(scales.width, scales.height)
                    scales.height = scales.width
                case .aspectFill:
                    scales.width = max(scales.width, scales.height)
                    scales.height = scales.width
                case .stretch:
                    break
                case .center:
                    scales.width = 1
                    scales.height = 1
            }

            var result = rect.standardized
            result.size.width *= scales.width
            result.size.height *= scales.height
            result.origin.x = target.minX + (target.width - result.width) / 2
            result.origin.y = target.minY + (target.height - result.height) / 2
            return result
        }
    }
}
